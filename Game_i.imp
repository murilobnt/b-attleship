/* Game_i
 * Author: muril
 * Creation date: 16/06/2019
 */

IMPLEMENTATION Game_i
REFINES Game
    
IMPORTS
    Attack_grid,
    Player_ships

PROMOTES
    get_attack_grid1,
    get_attack_grid2

SEES
    Ship_ctx,
    Dimensions_ctx,
    Ship_type_ctx,
    Grid_cell,
    Attack_who_ctx
    
CONCRETE_VARIABLES
    ship_health_i,
    grid_to_ship1_i,
    grid_to_ship2_i,
    attacked1_i,
    attacked2_i,
    to_be_destroyed_i,
    ready_i
    
INVARIANT
    ship_health_i : 0..20 --> 0..4 &
    grid_to_ship1_i : 0..grid_sz_for_arr --> 0..9 &
    grid_to_ship2_i : 0..grid_sz_for_arr --> 10..19 &
    attacked1_i : 0..grid_sz_for_arr --> BOOL &
    attacked2_i : 0..grid_sz_for_arr --> BOOL &
    to_be_destroyed_i : 0..20 <-> 0..grid_sz_for_arr &
    ready_i : BOOL &
    ship_health_i = ship_health &
    grid_to_ship1_i = grid_to_ship1 &
    grid_to_ship2_i = grid_to_ship2 &
    attacked1_i = attacked1 &
    attacked2_i = attacked2 &
    ready_i = ready
    
INITIALISATION
    VAR ii IN
        ii := 0;
        ship_health_i(ii) := ship_size(ship_type_r(ii));
        WHILE ii < 20
        DO
            ii := ii + 1;
            ship_health_i(ii) := ship_size(ship_type_r(ii))
        INVARIANT
            ii : NAT & 0..ii <| ship_health_i = %xx . (xx : 0..20 | ship_size(ship_type_r(xx)))
        VARIANT
            20 - ii
        END
    END;
    grid_to_ship1_i := (0..grid_sz_for_arr) * {water_c};
    grid_to_ship2_i := (0..grid_sz_for_arr) * {water_c};
    attacked1_i := (0..grid_sz_for_arr) * {FALSE};
    attacked2_i := (0..grid_sz_for_arr) * {FALSE};
    to_be_destroyed_i := {};
    ready_i := FALSE
    
OPERATIONS
    rr <-- check_win_condition(to) =
    BEGIN
        IF to = p1 THEN
            VAR ret IN
                ret <-- is_empty_1;
                IF ret = TRUE 
                THEN
                    rr := TRUE
                ELSE
                    rr := FALSE
                END
            END
        ELSE
            VAR ret IN
                ret <-- is_empty_2;
                IF ret = TRUE 
                THEN
                    rr := TRUE
                ELSE
                    rr := FALSE
                END
            END
        END
    END;
    
    add_ship(ii, oo, pp) =
    BEGIN
        VAR bb, ss IN
            bb <-- belongs_to_1(ii);
            ss := ship_size(ship_type_r(ii)) - 1;
            IF bb = TRUE THEN
                IF oo = horizontal THEN
                    VAR xx, tt, init IN
                    xx := 0;
                    tt := pp;
                    init := tt;
                    grid_to_ship1_i(tt) := ii;
                    WHILE ii < ss
                    DO
                        tt := tt + xx;
                        xx := xx + 1;
                        grid_to_ship1_i(tt) := ii 
                    INVARIANT
                        xx : NAT & !kk . (kk : init .. tt => grid_to_ship1_i(kk) = ii)
                    VARIANT
                        ss - xx
                    END
                END
                ELSE
                    VAR xx, tt, init IN
                    xx := 0;
                    tt := pp;
                    init := tt;
                    grid_to_ship1_i(tt) := ii;
                    WHILE ii < ss
                    DO
                        tt := tt + (xx * grid_dim_y);
                        xx := xx + 1;
                        grid_to_ship1_i(tt) := ii 
                    INVARIANT
                        xx : NAT & !kk . (kk : ran(%ll . (ll : 0 .. xx | ll * grid_dim_x)) => grid_to_ship1_i(kk) = ii)
                    VARIANT
                        ss - xx
                    END
                END
                END
            ELSE
                IF oo = horizontal THEN
                    VAR xx, tt, init IN
                    xx := 0;
                    tt := pp;
                    init := tt;
                    grid_to_ship2_i(tt) := ii;
                    WHILE ii < ss
                    DO
                        tt := tt + xx;
                        xx := xx + 1;
                        grid_to_ship2_i(tt) := ii 
                    INVARIANT
                        xx : NAT & !kk . (kk : init .. tt => grid_to_ship2_i(kk) = ii)
                    VARIANT
                        ss - xx
                    END
                END
                ELSE
                    VAR xx, tt, init IN
                    xx := 0;
                    tt := pp;
                    init := tt;
                    grid_to_ship2_i(tt) := ii;
                    WHILE ii < ss
                    DO
                        tt := tt + (xx * grid_dim_y);
                        xx := xx + 1;
                        grid_to_ship2_i(tt) := ii 
                    INVARIANT
                        xx : NAT & !kk . (kk : ran(%ll . (ll : 0 .. xx | ll * grid_dim_x)) => grid_to_ship2_i(kk) = ii)
                    VARIANT
                        ss - xx
                    END
                END
                END
            END
        END
    END;
    
    unlock_attack =
    BEGIN
        ready_i := TRUE
    END;
    
    rr <-- attack(pp, to) = 
    BEGIN
        IF to = p1 THEN
            VAR gs IN
                gs := grid_to_ship1_i(pp);
                IF gs /= water_c THEN
                    ship_health_i(grid_to_ship1_i(pp)) := ship_health_i(grid_to_ship1_i(pp)) - 1;
                    VAR sh IN
                        sh := ship_health_i(grid_to_ship1_i(pp));
                        IF sh = 0 THEN
                            rr := destroyed;
    //                    LET ss_boundary BE ss_boundary = ship_size(ship_type_r(grid_to_ship1(pp))) - 1 IN
    //                        ANY dd WHERE dd : 0..ss_boundary --> 0 .. grid_sz_for_arr & 
    //                            ran(dd) = to_be_destroyed[{grid_to_ship1(pp)}] \/ {pp}
    //                        THEN
    //                            LET sz BE sz = ship_size(ship_type_r(grid_to_ship1(pp))) - 1 IN
    //                                update_atk_grid_for_destroyed_ship(dd, to, sz)
    //                            END
    //                        END
    //                    END;
                            grid_to_ship1_i(pp) := water_c;
                            remove_ship_from_1(grid_to_ship1_i(pp))
                        ELSE
                            rr := hit;
                            //to_be_destroyed_i := to_be_destroyed_i \/ {grid_to_ship1_i(pp) |-> pp};
                            update_atk_grid(pp, ship, to);
                            grid_to_ship1_i(pp) := water_c
                        END
                    END
                ELSE
                    rr := miss;
                    update_atk_grid(pp, water, to)
                END
            END;
            attacked1_i(pp) := TRUE
        ELSE
            VAR gs IN
                gs := grid_to_ship2_i(pp);
                IF gs /= water_c THEN
                    ship_health_i(grid_to_ship2_i(pp)) := ship_health_i(grid_to_ship2_i(pp)) - 1;
                    VAR sh IN
                        sh := ship_health_i(grid_to_ship2_i(pp));
                        IF sh = 0 THEN
                            rr := destroyed; 
//                    LET ss_boundary BE ss_boundary = ship_size(ship_type_r(grid_to_ship2(pp))) - 1 IN
//                        ANY dd WHERE dd : 0..ss_boundary --> 0 .. grid_sz_for_arr & 
//                            ran(dd) = to_be_destroyed[{grid_to_ship2(pp)}] \/ {pp}
//                        THEN
//                            LET sz BE sz = ship_size(ship_type_r(grid_to_ship2(pp))) - 1 IN
//                                update_atk_grid_for_destroyed_ship(dd, to, sz)
//                            END
//                        END
//                    END;
                            grid_to_ship2_i(pp) := water_c;
                            remove_ship_from_2(grid_to_ship2_i(pp))
                        ELSE
                            rr := hit;
                        //to_be_destroyed_i := to_be_destroyed_i \/ {grid_to_ship2_i(pp) |-> pp};
                            update_atk_grid(pp, ship, to);
                            grid_to_ship2_i(pp) := water_c
                        END
                    END
                ELSE
                    rr := miss; 
                    update_atk_grid(pp, water, to)
                END
            END;
            attacked2_i(pp) := TRUE
        END
    END

END