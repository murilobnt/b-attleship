/* Game_i
 * Author: muril
 * Creation date: 16/06/2019
 */

IMPLEMENTATION Game_i
REFINES Game
    
IMPORTS
    Attack_grid,
    Player_ships

PROMOTES
    get_attack_grid1,
    get_attack_grid2

SEES
    Ship_ctx,
    Dimensions_ctx,
    Ship_type_ctx,
    Grid_cell,
    Attack_who_ctx
    
CONCRETE_VARIABLES
    ship_health_i,
    grid_to_ship1_i,
    grid_to_ship2_i,
    in_grid,
    attacked1_i,
    attacked2_i,
    to_be_destroyed_i,
    aux_array,
    ready_i
    
INVARIANT
    ship_health_i : 0..20 --> 0..4 &
    grid_to_ship1_i : 0..grid_sz_for_arr --> 0..20 &
    grid_to_ship2_i : 0..grid_sz_for_arr --> 10..20 &
    in_grid : 0..19 --> BOOL &
    attacked1_i : 0..grid_sz_for_arr --> BOOL &
    attacked2_i : 0..grid_sz_for_arr --> BOOL &
    to_be_destroyed_i : 0..80 --> 0..grid_sz_for_arr &
    ready_i : BOOL &
    ship_health_i = ship_health &
    grid_to_ship1_i = grid_to_ship1 &
    grid_to_ship2_i = grid_to_ship2 &
    attacked1_i = attacked1 &
    attacked2_i = attacked2 &
    !xx . (xx : dom(to_be_destroyed) => !yy . (yy : to_be_destroyed[{xx}] => yy : ran(to_be_destroyed_i))) &
    aux_array : 0 .. 4 --> 0 .. grid_sz_for_arr &
    ready_i = ready
    
INITIALISATION
    ship_health_i := (0..20) * {0};
    in_grid := (0..19) * {FALSE};
    VAR ii IN
        ii := 0;
        ship_health_i(ii) := ship_size(ship_type_r(ii));
        WHILE ii < 20
        DO
            ship_health_i(ii) := ship_size(ship_type_r(ii));
            ii := ii + 1
        INVARIANT
            ii : NAT & 0..ii - 1 <| ship_health_i = %xx . (xx : 0..ii - 1 | ship_size(ship_type_r(xx)))
        VARIANT
            20 - ii
        END
    END;
    grid_to_ship1_i := (0..grid_sz_for_arr) * {water_c};
    grid_to_ship2_i := (0..grid_sz_for_arr) * {water_c};
    attacked1_i := (0..grid_sz_for_arr) * {FALSE};
    attacked2_i := (0..grid_sz_for_arr) * {FALSE};
    to_be_destroyed_i := (0..80) * {0};
    aux_array := (0..4) * {0};
    ready_i := FALSE
    
OPERATIONS
    rr <-- check_win_condition(to) =
    BEGIN
        IF to = p1 THEN
            VAR ret IN
                ret <-- is_empty_1;
                IF ret = TRUE 
                THEN
                    rr := TRUE
                ELSE
                    rr := FALSE
                END
            END
        ELSE
            VAR ret IN
                ret <-- is_empty_2;
                IF ret = TRUE 
                THEN
                    rr := TRUE
                ELSE
                    rr := FALSE
                END
            END
        END
    END;
    
    rr <-- unlock_attack =
    BEGIN
        VAR ii, vv IN
            ii := 0;
            vv := TRUE;
            WHILE ii < 20 & vv = TRUE
            DO
                VAR val IN
                    val := in_grid(ii);
                    IF ii < 20 & val = FALSE
                    THEN
                        vv := FALSE
                    END
                END;
                ii := ii + 1
            INVARIANT ii : NAT & ii <= 20 & (vv = TRUE <=> !xx.(xx : 0 .. ii - 1 => in_grid(xx) = TRUE))
            VARIANT 20 - ii
            END;
            ready_i := vv;
            IF ready_i = TRUE THEN
                rr := success
            ELSE
                rr := error
            END
        END
    END;
    
    rr <-- add_ship(ii, oo, pp) =
    BEGIN
        VAR ig IN
            ig := in_grid(ii);
            IF ready_i = FALSE & ig = FALSE
            THEN
                VAR bb, ss IN
                    bb <-- belongs_to_1(ii);
                    ss := ship_size(ship_type_r(ii)) - 1;
                    IF bb = TRUE THEN
                        IF oo = horizontal THEN
                            VAR xx, 
                                tt, 
                                init, 
                                bureak, 
                                boundary,
                                position
                            IN
                                xx := 0;
                                tt := pp;
                                init := tt;
                                bureak := FALSE;
                                boundary := 0;
                                position := grid_to_ship1_i(tt);
                                IF position /= water_c THEN
                                    bureak := TRUE
                                END;
                                WHILE xx < ss & bureak = FALSE
                                DO
                                    tt := tt + 1;
                                    xx := xx + 1;
                                    boundary := (pp mod grid_dim_x) + xx;
                                    position := grid_to_ship1_i(tt);
                                    IF position /= water_c or boundary >= grid_dim_x THEN
                                        bureak := TRUE
                                    END
                                INVARIANT
                                    xx : NAT & xx <= ss & 
                                    (bureak = FALSE <=> 
                                        !kk . (kk : init .. tt => grid_to_ship1_i(kk) = water_c & 
                                            (pp mod grid_dim_x) + xx < grid_dim_x))
                                VARIANT
                                    ss - xx
                                END;
                                
                                IF bureak = FALSE
                                THEN
                                    xx := 0;
                                    tt := pp;
                                    init := tt;
                                    grid_to_ship1_i(tt) := ii;
                                    WHILE xx < ss
                                    DO
                                        tt := tt + 1;
                                        grid_to_ship1_i(tt) := ii;
                                        xx := xx + 1
                                    INVARIANT
                                        xx : NAT & xx <= ss & !kk . (kk : init .. tt => grid_to_ship1_i(kk) = ii)
                                    VARIANT
                                        ss - xx
                                    END;
                                    in_grid(ii) := TRUE;
                                    rr := success
                                ELSE
                                    rr := error
                                END
                            END
                        ELSE
                            VAR xx, 
                                tt, 
                                init, 
                                bureak, 
                                boundary, 
                                position 
                            IN
                                xx := 0;
                                tt := pp;
                                init := tt;
                                bureak := FALSE;
                                boundary := 0;
                                position := grid_to_ship1_i(tt);
                                IF position /= water_c THEN
                                    bureak := TRUE
                                END;
                                
                                WHILE xx < ss & bureak = FALSE
                                DO
                                    tt := tt + grid_dim_y;
                                    xx := xx + 1;
                                    boundary := pp + (xx * grid_dim_y);
                                    position := grid_to_ship1_i(tt);
                                    IF position /= water_c or boundary >= grid_sz THEN
                                        bureak := TRUE
                                    END
                                INVARIANT
                                    xx : NAT & xx <= ss & 
                                    (bureak = FALSE <=> 
                                        !kk . (kk : ran(%ll . (ll : 0 .. xx | init + (ll * grid_dim_y))) => grid_to_ship1_i(kk) = water_c & 
                                            pp + (xx * grid_dim_y) < grid_sz))
                                VARIANT
                                    ss - xx
                                END;
                                
                                IF bureak = FALSE
                                    THEN
                                    xx := 0;
                                    tt := pp;
                                    init := tt;
                                    grid_to_ship1_i(tt) := ii;
                                    
                                    WHILE xx < ss
                                    DO
                                        tt := tt + grid_dim_y;
                                        grid_to_ship1_i(tt) := ii;
                                        xx := xx + 1
                                    INVARIANT
                                        xx : NAT & xx <= ss & 
                                        !kk . (kk : ran(%ll . (ll : 0 .. xx | init + (ll * grid_dim_x))) => 
                                            grid_to_ship1_i(kk) = ii)
                                    VARIANT
                                        ss - xx
                                    END;
                                    in_grid(ii) := TRUE;
                                    rr := success
                                ELSE
                                    rr := error
                                END
                            END
                        END
                    ELSE
                        IF oo = horizontal THEN
                            VAR xx, 
                                tt, 
                                init, 
                                bureak, 
                                boundary,
                                position
                            IN
                                xx := 0;
                                tt := pp;
                                init := tt;
                                bureak := FALSE;
                                boundary := 0;
                                position := grid_to_ship2_i(tt);
                                IF position /= water_c THEN
                                    bureak := TRUE
                                END;
                                WHILE xx < ss & bureak = FALSE
                                DO
                                    tt := tt + 1;
                                    xx := xx + 1;
                                    boundary := (pp mod grid_dim_x) + xx;
                                    position := grid_to_ship2_i(tt);
                                    IF position /= water_c or boundary >= grid_dim_x THEN
                                        bureak := TRUE
                                    END
                                INVARIANT
                                    xx : NAT & xx <= ss & 
                                    (bureak = FALSE <=> 
                                        !kk . (kk : init .. tt => grid_to_ship2_i(kk) = water_c & 
                                            (pp mod grid_dim_x) + xx < grid_dim_x))
                                VARIANT
                                    ss - xx
                                END;
                                
                                IF bureak = FALSE
                                THEN
                                    xx := 0;
                                    tt := pp;
                                    init := tt;
                                    grid_to_ship2_i(tt) := ii;
                                    WHILE xx < ss
                                    DO
                                        tt := tt + 1;
                                        grid_to_ship2_i(tt) := ii;
                                        xx := xx + 1
                                    INVARIANT
                                        xx : NAT & xx <= ss & !kk . (kk : init .. tt => grid_to_ship2_i(kk) = ii)
                                    VARIANT
                                        ss - xx
                                    END;
                                    in_grid(ii) := TRUE;
                                    rr := success
                                ELSE
                                    rr := error
                                END
                            END
                        ELSE
                            VAR xx, 
                                tt, 
                                init, 
                                bureak, 
                                boundary, 
                                position 
                            IN
                                xx := 0;
                                tt := pp;
                                init := tt;
                                bureak := FALSE;
                                boundary := 0;
                                position := grid_to_ship2_i(tt);
                                IF position /= water_c THEN
                                    bureak := TRUE
                                END;
                                
                                WHILE xx < ss & bureak = FALSE
                                DO
                                    tt := tt + grid_dim_y;
                                    xx := xx + 1;
                                    boundary := pp + (xx * grid_dim_y);
                                    position := grid_to_ship2_i(tt);
                                    IF position /= water_c or boundary >= grid_sz THEN
                                        bureak := TRUE
                                    END
                                INVARIANT
                                    xx : NAT & xx <= ss & 
                                    (bureak = FALSE <=> 
                                        !kk . (kk : ran(%ll . (ll : 0 .. xx | init + (ll * grid_dim_y))) => grid_to_ship2_i(kk) = water_c & 
                                            pp + (xx * grid_dim_y) < grid_sz))
                                VARIANT
                                    ss - xx
                                END;
                                
                                IF bureak = FALSE
                                    THEN
                                    xx := 0;
                                    tt := pp;
                                    init := tt;
                                    grid_to_ship2_i(tt) := ii;
                                    
                                    WHILE xx < ss
                                    DO
                                        tt := tt + grid_dim_y;
                                        grid_to_ship2_i(tt) := ii;
                                        xx := xx + 1
                                    INVARIANT
                                        xx : NAT & xx <= ss & 
                                        !kk . (kk : ran(%ll . (ll : 0 .. xx | init + (ll * grid_dim_x))) => 
                                            grid_to_ship2_i(kk) = ii)
                                    VARIANT
                                        ss - xx
                                    END;
                                    in_grid(ii) := TRUE;
                                    rr := success
                                ELSE
                                    rr := error
                                END
                            END
                        END
                    END
                END
            ELSE
                rr := error
            END
        END
    END;
    
    rr, ll <-- attack(pp, to) = 
    BEGIN
        IF ready_i = TRUE
        THEN
            VAR att, gs IN
                IF to = p1 
                THEN
                    att := attacked1_i(pp);
                    gs := grid_to_ship1_i(pp);
                    IF att = FALSE
                    THEN
                        IF gs /= water_c 
                        THEN
                            VAR sh IN
                                sh := ship_health_i(gs);
                                IF sh > 0
                                THEN    
                                    ship_health_i(gs) := ship_health_i(gs) - 1;
                                    sh := ship_health_i(gs);
                                    IF sh = 0 THEN
                                        rr := destroyed;
                                        update_atk_grid(pp, destroyed_ship, to);
                                        VAR ii, ss, hh IN
                                            ii := 0;
                                            ss := ship_size(ship_type_r(gs));
                                            hh := ss - 1;
                                            WHILE ii < hh
                                            DO 
                                                ii := ii + 1;
                                                aux_array(ii) := to_be_destroyed_i((gs * 4) + ii);
                                                update_atk_grid(aux_array(ii), destroyed_ship, to)
                                            INVARIANT ii : NAT & 
                                                ii <= ss + 1 &
                                                0..ii - 1 <| aux_array = (gs * 4) .. ((gs * 4) + ii - 1) <| to_be_destroyed_i
                                            VARIANT ss - ii
                                            END 
                                        END;
                                        remove_ship_from_1(gs);
                                        grid_to_ship1_i(pp) := water_c;
                                        ll := success
                                    ELSE
                                        rr := hit;
                                        to_be_destroyed_i((gs * 4) + (ship_size(ship_type_r(gs)) - sh)) := pp;
                                        update_atk_grid(pp, ship, to);
                                        grid_to_ship1_i(pp) := water_c;
                                        ll := success
                                    END
                                ELSE
                                    rr := miss;
                                    ll := error
                                END
                            END
                        ELSE
                            rr := miss;
                            update_atk_grid(pp, water, to);
                            ll := success
                        END;
                        attacked1_i(pp) := TRUE
                    ELSE
                        rr := miss;
                        ll := error
                    END
                ELSE
                    att := attacked2_i(pp);
                    gs := grid_to_ship2_i(pp);
                    IF att = FALSE
                    THEN
                        IF gs /= water_c 
                        THEN
                            VAR sh IN
                                sh := ship_health_i(gs);
                                IF sh > 0
                                THEN    
                                    ship_health_i(gs) := ship_health_i(gs) - 1;
                                    sh := ship_health_i(gs);
                                    IF sh = 0 THEN
                                        rr := destroyed;
                                        update_atk_grid(pp, destroyed_ship, to);
                                        VAR ii, ss, hh IN
                                            ii := 0;
                                            ss := ship_size(ship_type_r(gs));
                                            hh := ss - 1;
                                            WHILE ii < hh
                                            DO 
                                                ii := ii + 1;
                                                aux_array(ii) := to_be_destroyed_i((gs * 4) + ii);
                                                update_atk_grid(aux_array(ii), destroyed_ship, to)
                                            INVARIANT ii : NAT & 
                                                ii <= ss + 1 &
                                                0..ii - 1 <| aux_array = (gs * 4) .. ((gs * 4) + ii - 1) <| to_be_destroyed_i
                                            VARIANT ss - ii
                                            END 
                                        END;
                                        remove_ship_from_2(gs);
                                        grid_to_ship2_i(pp) := water_c;
                                        ll := success
                                    ELSE
                                        rr := hit;
                                        to_be_destroyed_i((gs * 4) + (ship_size(ship_type_r(gs)) - sh)) := pp;
                                        update_atk_grid(pp, ship, to);
                                        grid_to_ship2_i(pp) := water_c;
                                        ll := success
                                    END
                                ELSE
                                    rr := miss;
                                    ll := error
                                END
                            END
                        ELSE
                            rr := miss;
                            update_atk_grid(pp, water, to);
                            ll := success
                        END;
                        attacked2_i(pp) := TRUE
                    ELSE
                        rr := miss;
                        ll := error
                    END
                END
            END
        ELSE
            rr := miss;
            ll := error
        END
    END;
    
    rr <-- get_grid_to_ship1 = rr := grid_to_ship1_i;
    
    rr <-- get_grid_to_ship2 = rr := grid_to_ship2_i

END